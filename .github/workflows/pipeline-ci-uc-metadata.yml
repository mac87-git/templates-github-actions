name: Validating UC Metadata

on:
  workflow_call:
    inputs:
      base_rev:
        description: branch or commit used as base for compare
        required: true
        type: string
      head_rev:
        description: branch or commit used as head for compare
        required: true
        type: string

permissions:
  contents: read # This is required for actions/checkout

jobs:
  
  changed-metadata-files:
  #   name: Get modified metadata files
  #   uses: ./.github/workflows/wf-uc-metadata-get-changed-files.yml
  #   # uses: ClipMX/data-github-actions-templates/.github/workflows/wf-uc-metadata-get-changed-files@main
  #   with:
  #     base_rev: ${{ inputs.base_rev }}
  #     head_rev: ${{ inputs.head_rev }}

    name: Get changed and deleted files
    runs-on: ubuntu-latest
    # outputs:
    #   changed: ${{ steps.changed-files.outputs.changed }}
    #   deleted: ${{ steps.changed-files.outputs.deleted }}
    env:
      BASE_REV: ${{ inputs.base_rev }}
      HEAD_REV: ${{ inputs.head_rev }}
      CHECK_PATHS: catalog_metadata
    steps:
      - name: 'Checkout head: $HEAD_REV'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: $HEAD_REV
  
      - name: Validate input references
        run: |
          git fetch origin $BASE_REV
          git rev-parse --verify origin/$BASE_REV || { echo "Invalid base_rev"; exit 1; }
          git rev-parse --verify $HEAD_REV || { echo "Invalid head_rev"; exit 1; }

      - name: Merge $HEAD_REV with $BASE_REV
        run: |
          git config --global user.email "cicd@example.com"
          git config --global user.name "CI-CD"
          git merge --squash --no-commit --strategy-option=ours origin/$BASE_REV

      - name: Show info
        run: |
          echo Getting differences between:
          echo - head: $(git rev-parse --abbrev-ref HEAD) @ $(git rev-parse HEAD)
          echo - base: $(git rev-parse --abbrev-ref origin/$BASE_REV) @ $(git rev-parse origin/$BASE_REV)
          echo for files: $CHECK_PATHS
          git status
          echo changed
          git diff --ignore-space-at-eol --no-renames --diff-filter=d --name-only origin/$BASE_REV
          echo deleted
          git diff --ignore-space-at-eol --no-renames --diff-filter=D --name-only origin/$BASE_REV

      - name: Get changed files
        id: changed-files
        run: |
          _get_changes() {
            diff_filter=$1
            base=$2
            shift 2
            changes=$(git diff --ignore-space-at-eol --no-renames --diff-filter=$diff_filter --name-only $base -- $@ | tr '\n' ' ')
            # remove the terminating empty space
            changes=${changes%?}
            echo $changes
          }
          changed=$(_get_changes d origin/$BASE_REV "$CHECK_PATHS")
          # deleted=$(_get_changes D origin/$BASE_REV "$CHECK_PATHS")
          # # get deleted files from previous commits in the same branch
          # commits_ahead=$(git rev-list --count "$(git rev-parse origin/$BASE_REV)..$(git rev-parse HEAD)")
          # # max 25 commits or untilorigin/ BASE_REV
          # commits_ahead=$((commits_ahead > 25 ? 25 : commits_ahead))
          # echo Checking for delted files in the last $commits_ahead commits
          # # get deleted files in each commit
          # for ((i=1; i<$commits_ahead; i++)); do
          #   deleted_files=$(_get_changes D HEAD~$i "$CHECK_PATHS")
          #   for file in $deleted_files; do
          #     # do not add files:
          #     # - twice
          #     # - if they are in "changed"
          #     if [[ $deleted != *"$file"* && $changed != *"$file"* ]]; then
          #       deleted+=" $file"
          #     fi
          #   done
          # done
          # # Set job outputs
          echo changed=$changed >> $GITHUB_OUTPUT
          # echo deleted=$deleted >> $GITHUB_OUTPUT

      - name: Print outputs
        run: |
          echo "Changed files:"
          echo "${{ steps.changed-files.outputs.changed }}"
          # echo "Deleted files:"
          # echo "${{ steps.changed-files.outputs.deleted }}"

  # validate-metadata-files:
  #   runs-on: ubuntu-latest
  #   needs: changed-metadata-files
  #   if: ${{ needs.changed-metadata-files.outputs.changed != '' }}
  #   steps:
  #     - uses: actions/checkout@v4
      - name: Validate metadata yml files
        uses: ./.github/actions/uc-metadata-validate-action
        # uses: ClipMX/data-github-actions-templates/.github/actions/uc-metadata-validate-action@main
        with:
          file-list: ${{ steps.changed-files.outputs.changed }} # ${{ needs.changed-metadata-files.outputs.changed }}
