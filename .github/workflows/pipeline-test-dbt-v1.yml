name: Test DBT projects integrity
on:
  workflow_call:
    inputs:
      dbt_repository_folder:
        required: false
        type: string
        description: 'Path of the dbt projects folder in the repository'
        default: dbt
      dbt_projects_list:
        description: whitespace separated list of projects to deploy
        required: true
        type: string
      environment:
        description: 'Select the environment to deploy'
        required: true
        type: string
      python_version:
        description: 'Python version to use for parsing dbt projects'
        required: true
        type: string
      poetry_install_options:
        description: 'Optional parameters to pass to the poetry install command'
        required: false
        type: string 
  
jobs:
  test-dbt:
    name: 'Test dbt projects'
    runs-on: ubuntu-latest
    env:
      # cache_path should be absolute:
      DBT_CACHE_PATH: /tmp/dbt_cache
      DBT_TARGET_CACHE_GLOB: /tmp/dbt_cache/*/target
      DBT_REPOSITORY_FOLDER: ${{ inputs.dbt_repository_folder }}
      PYTHON_VERSION: ${{ inputs.python_version }}
      POETRY_INSTALL_OPTIONS: ${{ inputs.poetry_install_options }}
      ENVIRONMENT: ${{ inputs.environment }}
      DBT_ENV_SECRET_DBKS_DEV_TOKEN: mock
      DBT_ENV_SECRET_DBKS_PRD_TOKEN: mock
      DBT_ENV_SECRET_DBKS_BANKING_DEV_TOKEN: mock
      DBT_ENV_SECRET_DBKS_BANKING_PRD_TOKEN: mock
    steps:
      # BEGIN SETUP
      - name: 'Checkout head: ${{ github.event.pull_request.head.ref }}'
        uses: actions/checkout@v4

      - run: pipx install poetry

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - run: poetry install ${{ env.POETRY_INSTALL_OPTIONS }}
      
      # BEGIN DBT CACHE
      - name: Create manifest hash
        id: create-manifest-hash
        env:
          MANIFEST_GLOB: ${{ env.DBT_CACHE_PATH }}/*/target/manifest.json
        run: |
          for project in ${{ inputs.dbt_projects_list }}; do
            project_path="$DBT_REPOSITORY_FOLDER/$project"
            echo " ** Processing: $project_path **"
            if [[ -d $project_path && -f $project_path/profiles.yml && -f $project_path/dbt_project.yml ]]; then
              echo " ** Creating manifest hash **"
              export DBT_PROJECT_DIR=$project_path
              export DBT_TARGET_PATH=$DBT_CACHE_PATH/$project/target
              poetry run dbt deps
              mkdir -p $DBT_CACHE_PATH/$project
              cp -r $DBT_PROJECT_DIR/dbt_packages $DBT_CACHE_PATH/$project
              poetry run dbt ls --profiles-dir $DBT_PROJECT_DIR --target dev
            fi
          done

          manifest_hash="$(ls $MANIFEST_GLOB | sort | xargs cat | sha256sum | cut -d ' ' -f 1)"
          echo manifest_hash="$manifest_hash" >> $GITHUB_OUTPUT
      
      - name: Cache dbt-target
        uses: actions/cache@v4
        with:
          key: dbt-target-${{ steps.create-manifest-hash.outputs.manifest_hash }}
          restore-keys: dbt-target-
          path: |
            ${{ env.DBT_TARGET_CACHE_GLOB }}/
            !**/run
      # END DBT CACHE

      - name: Test full dbt projects
        run: |
          echo dbt_projects_list: ${{ inputs.dbt_projects_list }}
          for project in ${{ inputs.dbt_projects_list }}; do
            project_path="$DBT_REPOSITORY_FOLDER/$project"
            echo " ** Processing: $project_path **"
            if [[ -d $project_path && -f $project_path/profiles.yml && -f $project_path/dbt_project.yml ]]; then
              echo " ** Testing dbt project: $project_path **"
              export DBT_PROJECT_DIR=$project_path
              export DBT_PROFILES_DIR=$DBT_PROJECT_DIR
              export DBT_TARGET_PATH=$DBT_CACHE_PATH/$project/target
              poetry run dbt parse --target $ENVIRONMENT
              tree $project_path
            fi
          done
          