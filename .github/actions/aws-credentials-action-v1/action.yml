name: 'AWS Credentials Action'
description: 'Sets AWS credentials using OIDC and assumes an additional role'
inputs:
  role-to-assume:
    description: 'The AWS role to assume with OIDC'
    required: true
  aws-region:
    description: 'AWS region'
    required: true
  cicd-deployment-role:
    description: 'The CICD role to assume'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Get AWS credentials with OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ inputs.aws-region }}

    - name: Assuming another role
      id: get-creds
      run: |
        echo "Assuming the deployment role..."
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn ${{ inputs.cicd-deployment-role }} \
          --role-session-name gh-actions-call \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))
        # Mask out the credentials
        echo "::add-mask::$AWS_ACCESS_KEY_ID"
        echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
        echo "::add-mask::$AWS_SESSION_TOKEN"

        # Set them as env vars
        echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV